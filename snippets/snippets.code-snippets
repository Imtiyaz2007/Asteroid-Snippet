{
	"print": {
		"prefix": "print",
		"body": [
			"System.out.print($1);"
		],
		"description": "prints text with no new line"
	},
	"println": {
		"prefix": "println",
		"body": [
			"System.out.println($1);"
		],
		"description": "prints text with a new line"
	},
	"Scanner Object": {
		"prefix": "scanner",
		"body": [
			"Scanner ${1:sc} = new Scanner(${2:System.in});"
		],
		"description": "Creates a Scanner object"
	},
	"equals": {
		"prefix": "is",
		"body": [
			"=="
		],
		"description": "prints text with a new line"
	},
	"absolute": {
		"prefix": "abs",
		"body": [
			"Math.abs(${1:number})"
		],
		"description": "absolute method"
	},
	"power": {
		"prefix": "pow",
		"body": [
			"Math.pow(${1:number}, ${2:power})"
		],
		"description": "power method"
	},
	"round": {
		"prefix": "round",
		"body": [
			"Math.round(${1:number})"
		],
		"description": "round method"
	},
	"rint": {
		"prefix": "rint",
		"body": [
			"Math.rint(${1:number})"
		],
		"description": "rint method"
	},
	"ceil": {
		"prefix": "ceil",
		"body": [
			"Math.ceil(${1:number})"
		],
		"description": "ceil method"
	},
	"floor": {
		"prefix": "floor",
		"body": [
			"Math.floor(${1:number})"
		],
		"description": "floor method"
	},
	"pi": {
		"prefix": "pi",
		"body": [
			"Math.PI"
		],
		"description": "Pi Value"
	},
	"e": {
		"prefix": "e",
		"body": [
			"Math.E"
		],
		"description": "E"
	},
	"sin": {
		"prefix": "sin",
		"body": [
			"Math.sin(${1:number})"
		],
		"description": "sin method"
	},
	"cos": {
		"prefix": "cos",
		"body": [
			"Math.cos(${1:number})"
		],
		"description": "cos method"
	},
	"tan": {
		"prefix": "tan",
		"body": [
			"Math.tan(${1:number})"
		],
		"description": "tan method"
	},
	"max": {
		"prefix": "max",
		"body": [
			"Math.max(${1:number1}, ${2:number2})"
		],
		"description": "max method"
	},
	"min": {
		"prefix": "min",
		"body": [
			"Math.min(${1:number1}, ${2:number2})"
		],
		"description": "min method"
	},
	"error println": {
		"prefix": "errpln",
		"body": [
			"System.err.println($1)"
		],
		"description": "error println"
	},
	"error print": {
		"prefix": "errp",
		"body": [
			"System.err.print($1)"
		],
		"description": "error print"
	},
	"to integer": {
		"prefix": "to_i",
		"body": [
			"Integer.parseInt($1)"
		],
		"description": "parseInt"
	},
	"to short": {
		"prefix": "to_sh",
		"body": [
			"Short.parseShort($1)"
		],
		"description": "parseShort"
	},
	"to byte": {
		"prefix": "to_b",
		"body": [
			"Byte.parseByte($1)"
		],
		"description": "parseByte"
	},
	"to long": {
		"prefix": "to_l",
		"body": [
			"Long.parseLong($1)"
		],
		"description": "parseLong"
	},
	"to string": {
		"prefix": "to_s",
		"body": [
			"toString()"
		],
		"description": "toString"
	},
	"to float": {
		"prefix": "to_f",
		"body": [
			"Float.parseFloat($1)"
		],
		"description": "parseLong"
	},
	"to double": {
		"prefix": "to_d",
		"body": [
			"Double.parseDouble($1)"
		],
		"description": "parseLong"
	},
	"class and main method": {
		"prefix": "clsmain",
		"body": [
			"public class $TM_FILENAME_BASE {",
			"    public static void main(String[] args) {",
			"        $0",
			"    }",
			"}"
		],
		"description": "Generate class and main method"
	},
	"class": {
		"prefix": "cls",
		"body": [
			"public class $TM_FILENAME_BASE {",
			"    ",
			"}"
		],
		"description": "Generates a class"
	},
	"InputStreamReader": {
		"prefix": "inputstreamreader",
		"body": [
			"InputStreamReader ${1:in} = new InputStreamReader(${2:System.in});"
		],
		"description": "Generates a BufferedReader object"
	},
	"BufferedReader": {
		"prefix": "bufferedreader",
		"body": [
			"BufferedReader ${1:bf} = new BufferedReader(${2:new InputStreamReader(System.in)});"
		],
		"description": "Generates a BufferedReader object"
	},
	"object": {
		"prefix": "obj",
		"body": [
			"${1:$TM_FILENAME_BASE} ${2:obj} = new ${1:$TM_FILENAME_BASE}($3);"
		],
		"description": "Generates a object with the same name of the public class (Object class is taken from file name)"
	},
	"ternary operator": {
		"prefix": "ternary",
		"body": [
			"${1:true} ? ${1:0} : ${$1:0}"
		],
		"description": "ternary operator"
	},
	"logical or": {
		"prefix": "or",
		"body": [
			"||"
		],
		"description": "logical or"
	},
	"logical and": {
		"prefix": "and",
		"body": [
			"&&"
		],
		"description": "logical and"
	},
	"logical not": {
		"prefix": "not",
		"body": [
			"!"
		],
		"description": "logical not"
	},
	"not equals": {
		"prefix": "noteq",
		"body": [
			"!="
		],
		"description": "not equals"
	},
	"public static": {
		"prefix": "ps",
		"body": [
			"public static "
		],
		"description": "public static "
	},
	"public static final": {
		"prefix": "psf",
		"body": [
			"public static final "
		],
		"description": "public static final"
	},
	"public static final boolean": {
		"prefix": "psfb",
		"body": [
			"public static final boolean"
		],
		"description": "public static final boolean"
	},
	"public static final int": {
		"prefix": "psfi",
		"body": [
			"public static final int"
		],
		"description": "public static final int"
	},
	"public static final method": {
		"prefix": "psfm",
		"body": [
			"public static final ${1:void} ${2:methodName} (${3}) {",
			"    ${0}",
			"}"
		],
		"description": "public static final method"
	},
	"public static method": {
		"prefix": "psm",
		"body": [
			"public static final ${1:methodName} (${2}) {",
			"    ${0}",
			"}"
		],
		"description": "public static final method"
	},
	"public static final String": {
		"prefix": "psfs",
		"body": [
			"public static final String "
		],
		"description": "public static final String"
	},
	"public static int": {
		"prefix": "psi",
		"body": [
			"public static int "
		],
		"description": "public static int"
	},
	"public static boolean": {
		"prefix": "psb",
		"body": [
			"public static boolean "
		],
		"description": "public static boolean"
	},
	"public method": {
		"prefix": "pm",
		"body": [
			"public ${1:void} ${2:methodName} (${3}) {",
			"    ${0}",
			"}"
		],
		"description": "public method"
	},
	"public int": {
		"prefix": "pubint",
		"body": [
			"public int "
		],
		"description": "public int"
	},
	"public boolean": {
		"prefix": "pubbool",
		"body": [
			"public boolean "
		],
		"description": "public boolean"
	},
	"public String": {
		"prefix": "pubstr",
		"body": [
			"public String "
		],
		"description": "public String"
	},
	"final class": {
		"prefix": "fincls",
		"body": [
			"public final class $TM_FILENAME_BASE {",
			"    ",
			"}"
		],
		"description": "Generates a final class"
	},
	"try catch": {
		"prefix": "trycatch",
		"body": [
			"try {",
			"    ",
			"} catch (${1:Exception} ${2:e}) {",
			"    ",
			"}"
		],
		"description": "try catch block"
	},
	"if elseif else": {
		"prefix": "if_elseif_else",
		"body": [
			"if (${1:true}) {",
			"    ",
			"} else if (${2:true}) {",
			"    ",
			"} else {",
			"    ",
			"}"
		],
		"description": "if elseif else block"
	},
	"enum": {
		"prefix": "enum",
		"body": [
			"public enum ${1:$TM_FILENAME_BASE} {",
			"    ",
			"}"
		],
		"description": "Generates a enum"
	},
	"try catch finally": {
		"prefix": "trycatchfinally",
		"body": [
			"try {",
			"    ",
			"} catch (${1:Exception} ${2:e}) {",
			"    ",
			"} finally {",
			"    ",
			"}"
		],
		"description": "try catch finally block"
	},
	"Thread sleep": {
		"prefix": "sleep",
		"body": [
			"try {",
			"    Thread.sleep(${1:1000});",
			"} catch (InterruptedException e) {",
			"    e.printStackTrace();",
			"}"
		],
		"description": "Thread.sleep with try catch block surrounding it"
	},
	"String array": {
		"prefix": "strarr",
		"body": [
			"String[] ${1:arr} = ${2:new String[${3:10}]};"
		],
		"description": "String array"
	},
	"int array": {
		"prefix": "intarr",
		"body": [
			"int[] ${1:arr} = ${2:new int[${3:10}]};"
		],
		"description": "int array"
	},
	"short array": {
		"prefix": "shortarr",
		"body": [
			"short[] ${1:arr} = ${2:new short[${3:10}]};"
		],
		"description": "short array"
	},
	"byte array": {
		"prefix": "bytearray",
		"body": [
			"byte[] ${1:arr} = ${2:new byte[${3:10}]};"
		],
		"description": "byte array"
	},
	"long array": {
		"prefix": "longarr",
		"body": [
			"long[] ${1:arr} = ${2:new long[${3:10}]};"
		],
		"description": "long array"
	},
	"double array": {
		"prefix": "doublearr",
		"body": [
			"double[] ${1:arr} = ${2:new double[${3:10}]};"
		],
		"description": "double array"
	},
	"float array": {
		"prefix": "floatarr",
		"body": [
			"float[] ${1:arr} = ${2:new float[${3:10}]};"
		],
		"description": "float array"
	},
	"char array": {
		"prefix": "chararr",
		"body": [
			"char[] ${1:arr} = ${2:new char[${3:10}]};"
		],
		"description": "char array"
	},
	"boolean array": {
		"prefix": "boolarr",
		"body": [
			"boolean[] ${1:arr} = ${2:new boolean[${3:10}]};"
		],
		"description": "boolean array"
	},
	"Object array": {
		"prefix": "objarr",
		"body": [
			"Object[] ${1:arr} = ${2:new Object[${3:10}]};"
		],
		"description": "Object array"
	},
	"Array": {
		"prefix": "arr",
		"body": [
			"${1:Object}[] ${2:arr} = ${3:new ${1:Object}[${4:10}]};"
		],
		"description": "Array"
	},
	"main": {
		"prefix": "main",
		"body": [
			"public static void main(String[] args) {",
			"    $0",
			"}"
		],
		"description": "main method"
	},
	"public constructor": {
		"prefix": "constructor",
		"body": [
			"public ${1:${TM_FILENAME_BASE}}($2) {",
			"    ",
			"}"
		],
		"description": "public constructor"
	},
	"private method": {
		"prefix": "pvtm",
		"body": [
			"private ${1:void} ${2:name}($3) {",
			"    $0",
			"}"
		],
		"description": "private method"
	},
	"private static method": {
		"prefix": "pvtsm",
		"body": [
			"private static ${1:Type} ${2:name}(${3}) {",
			"    $0",
			"}"
		],
		"description": "private static method"
	},
	"protected method": {
		"prefix": "prom",
		"body": [
			"protected ${1:void} ${2:name}(${3}) {",
			"    $0",
			"}"
		],
		"description": "Protected method"
	},
	"protected static method": {
		"prefix": "prosm",
		"body": [
			"protected static ${1:void} ${2:name}(${3}) {",
			"    $0",
			"}"
		],
		"description": "Protected method"
	},
	"Switch Statement": {
		"prefix": "switch",
		"body": [
			"switch (${1:variable}) {",
			"    case ${2:value}:",
			"        $0",
			"        break;",
			"",
			"    default:",
			"        break;",
			"}"
		],
		"description": "Switch Statement"
	},
	"private field": {
		"prefix": "pvtf",
		"body": [
			"private ${1:String} ${2:name};"
		],
		"description": "Private field"
	},
	"abstract class": {
		"prefix": "abstract",
		"body": [
			"abstract class ${1:$TM_FILENAME_BASE} {",
			"    ${0}",
			"}"
		],
		"description": "abstract class"
	},
	"println method": {
		"prefix": "sopln",
		"body": [
			"System.out.println($1);"
		],
		"description": "println method"
	},
	"print method": {
		"prefix": "sop",
		"body": [
			"System.out.print($1);"
		],
		"description": "Array"
	},
	"println method 2": {
		"prefix": "puts",
		"body": [
			"System.out.println($1);"
		],
		"description": "println method"
	},
	"print method 2": {
		"prefix": "cout",
		"body": [
			"System.out.print($1);"
		],
		"description": "print method"
	},
	"printf": {
		"prefix": "printf",
		"body": [
			"System.out.printf($1);"
		],
		"description": "printf method"
	},
	"bubble sort": {
		"prefix": "bubblesort",
		"body": [
			"for (int i = 0; i < ${1:arr}.length - 1; i++) {", 
			"    for (int j = 0; j < ${1:arr}.length - i - 1; j++) {",
			"        if (${1:arr}[j] > ${1:arr}[j + 1]) {",
			"            int ${2:tmp} = ${1:arr}[j];",
			"            ${1:arr}[j] = ${1:arr}[j + 1];",
			"            ${1:arr}[j + 1] = ${2:tmp};",
			"        }",
			"    }",
			"}"
		],
		"description": "Bubble sort algorithm (Sorts in ascending order; change > to < in the if statement to sort in decending order.)"
	},
	"print array": {
		"prefix": "printarr",
		"body": [
			"for (int i = 0; i < ${1:arr}.length; i++) {",
			"    System.out.println(${1:arr}[i]);",
			"}"
		],
		"description": "print a given array"
	},
	"selection sort": {
		"prefix": "selectionsort",
		"body": [
			"for (int i = 0; i < ${1:arr}.length - 1; i++) {",
			"    int ${2:minIndex} = i;", 
			"    for (int j = i + 1; j < ${1:arr}.length; j++) {",
			"        if (${1:arr}[j] < ${1:arr}[${2:minIndex}]) ",
			"            ${2:minIndex} = j;",
			"    }",
			"    int ${3:tmp} = ${1:arr}[i];",
			"    ${1:arr}[i] = ${1:arr}[${2:minIndex}];",
			"    ${1:arr}[${2:minIndex}] = ${3:tmp};",
			"}"
		],
		"description": "Selection sort algorithm (Sorts in ascending order; change < to > in the if statement to sort in decending order.)"
	},
	"linear search": {
		"prefix": "linearsearch",
		"body": [
			"int ${1:index} = -1;",
			"for (int i = 0; i < ${2:arr}.length; i++) {",
			"    if(${2:arr}[i] == ${3:toSearch}) {",
			"        ${1:index} = i;",
			"        break;",
			"    }",
			"}"
		],
		"description": "Linear sort algorithm. First element index is stored in the variable declared just above the loop."
	},
	"binary search": {
		"prefix": "binarysearch",
		"body": [
			"int index = -1, start = 0, end = ${1:arr}.length, mid;",
			"while (start <= end) {",
			"    mid = (start + end) / 2;",
			"    if(${2:toSearch} == ${1:arr}[mid]) {",
			"       index = mid;",
			"       break;",
			"    } else if (${2:toSearch} < ${1:arr}[mid])",
			"       end = mid - 1;",
			"    else",
			"        start = mid + 1;",
			"}"
		],
		"description": "Binary search algorithm. First element index is stored in the 'index' variable declared just above the loop."
	},
}